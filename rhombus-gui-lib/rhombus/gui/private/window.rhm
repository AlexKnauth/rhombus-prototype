#lang rhombus/static/and_meta
import:
  lib("racket/gui/easy.rkt")
  rhombus/draw/private/symbol_map.symbol_map_annot
  "view.rhm":
    expose:
      View
      WindowView
  "view.rhm"!private.to_view
  "obs.rhm":
    expose:
      Obs
      ObsOrValue

export:
  Window

class Window(private _handle):
  implements WindowView
  override property handle: _handle

  constructor (~title: title :: ObsOrValue.of(String) = "Untitled",
               ~size: size :: ObsOrValue.of(View.Size) = [#false, #false],
               ~alignment: alignment :: ObsOrValue.of(View.Alignment) = [#'center, #'top],
               ~position: position :: ObsOrValue.of(View.Position) = #'center,
               ~min_size: min_size :: ObsOrValue.of(View.Size) = [#false, #false],
               ~stretch: stretch :: ObsOrValue.of(View.Stretch) = [#true, #true],
               ~styles: style :: ObsOrValue.of(List.of(Window.Style)) = [],
               ~mixin: mix :: Function = values,
               child :: ObsOrValue.of(View),
               ...):
    super(easy.window(~title: obs.unwrap(title),
                      ~size: obs.unwrap_list(size, values),
                      ~alignment: obs.unwrap_list(alignment, values),
                      ~position: obs.unwrap(position),
                      ~#{min-size}: obs.unwrap_list(min_size, values),
                      ~stretch: obs.unwrap_list(stretch, values),
                      ~style: obs.unwrap_list(style, convert_style),
                      ~mixin: mix,
                      to_view(child).handle,
                      ...))

  export:
    Style

  symbol_map_annot Style convert_style:
    { no_resize_border: #{no-resize-border},
      no_caption: #{no-caption},
      no_system_menu: #{no-system-menu},
      hide_menu_bar: #{hide-menu-bar},
      toolbar_button: #{toolbar-button},
      float: float,
      metal: metal,
      fullscreen_button: #{fullscreen-button},
      fullscreen_aux: #{fullscreen-aux} }
