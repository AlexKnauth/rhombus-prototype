#lang rhombus/static/and_meta
import:
  lib("racket/gui/easy.rkt")
  rhombus/draw:
    expose:
      Color
      Font
  rhombus/draw/private/font!private._Font
  rhombus/draw/private/symbol_map.symbol_map_annot
  "label.rhm".Label.normal_control_font
  "obs.rhm":
    expose:
      Obs
      ObsOrValue
  "view.rhm".View

export:
  Input

class Input(private _handle, private _at_content :: Obs):
  implements View
  override property handle: _handle

  constructor (content :: ObsOrValue.of(Any) = "",
               ~action: action :: maybe((Input.Action, String) -> ~any) = #false,
               ~label: label :: ObsOrValue.of(View.LabelString) = "",
               ~is_enabled: is_enabled :: ObsOrValue.of(Boolean) = #true,
               ~background_color: bg_color :: ObsOrValue.of(maybe(Color)) = #false,
               ~style: style :: ObsOrValue.of(List.of(Input.StyleSymbol)) = [#'single],
               ~font : font :: Font = normal_control_font,
               // ~keymap: ... TODO
               ~margin: margin :: ObsOrValue.of(View.Margin) = [0, 0],
               ~min_size: min_size :: ObsOrValue.of(View.Size) = [#false, #false],
               ~stretch: stretch :: ObsOrValue.of(View.Stretch) = [#true, #true],
               ~mixin: mixin :: Function = values,
               ~is_equal_value: is_equal :: maybe(Function.of_arity(2)) = fun (a, b): a == b,
               ~value_to_text: val_to_txt :: Function = values):
    let at_content = obs.to_obs(content)
    super(easy.input(obs.unwrap(content), action,
                     ~label: obs.unwrap(label),
                     ~#{enabled?}: obs.unwrap(is_enabled),
                     ~#{background-color}: obs.unwrap(bg_color),
                     ~style: obs.unwrap_list(style, convert_style),
                     ~font: obs.unwrap_convert(font, fun (f): f && (f :~ Font).handle),
                     ~margin: obs.unwrap_list(margin, values),
                     ~#{min-size}: obs.unwrap_list(min_size, values),
                     ~stretch: obs.unwrap_list(stretch, values),
                     ~mixin: mixin,
                     ~#{value=?}: is_equal,
                     ~#{value->text}: val_to_txt),
          at_content)

  property at_content :: Obs:
    _at_content.map(values)

  export:
    StyleSymbol
    Action

  symbol_map_annot StyleSymbol convert_style:
    { deleted: deleted,
      horizontal_label: #{horizontal-label},
      hscroll: hscroll,
      multiple: multiple,
      password: password,
      single: single,
      vertical_label: #{vertical-label} }

  enum Action:
    input
    return
