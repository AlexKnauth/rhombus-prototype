#lang rhombus/static/and_meta
import:
  rhombus/draw/private/rkt
  rhombus/draw
  lib("racket/gui/easy.rkt")
  rhombus/draw/private/symbol_map.symbol_map_annot
  "view.rhm".View
  rhombus/draw/private/dc!internal.SomeDC
  "event.rhm"!private:
    expose:
      _MouseEvent
      _KeyEvent
  "event.rhm":
    expose:
      MouseEvent
      KeyEvent
  "obs.rhm":
    expose:
      ObsOrValue
  "canvas-help.rkt".add_canvas_callbacks

export:
  Canvas
  CanvasContext

class Canvas(private _handle):
  implements View
  override property handle: _handle

  constructor (data,
               draw :: (draw.DC, Any) -> ~any,
               ~label: label :: ObsOrValue.of(maybe(View.LabelString)) = #false,
               ~key: on_key :: (KeyEvent, CanvasContext) -> ~any = Function.pass,
               ~mouse: on_mouse :: (MouseEvent, CanvasContext) -> ~any = Function.pass,
               ~is_enabled: is_enabled :: ObsOrValue.of(Boolean) = #true,
               ~styles: style :: ObsOrValue.of(List.of(Canvas.Style)) = [],
               ~margin: margin :: ObsOrValue.of(View.Margin) = [0, 0],
               ~min_size: min_size :: ObsOrValue.of(View.Size) = [#false, #false],
               ~stretch: stretch :: ObsOrValue.of(View.Stretch) = [#true, #true],
               ~mixin: mix :: Function = values):
    super(easy.canvas(obs.unwrap(data),
                      fun (dc, data): draw(SomeDC(dc), data),
                      ~label: obs.unwrap(label),
                      ~#{enabled?}: obs.unwrap(is_enabled),
                      ~style: obs.unwrap_list(style, convert_style),
                      ~margin: obs.unwrap_list(margin, values),
                      ~#{min-size}: obs.unwrap_list(min_size, values),
                      ~stretch: obs.unwrap_list(stretch, values),
                      ~mixin: fun (c):
                                mix(add_canvas_callbacks(
                                      c,
                                      fun (ev, w_handle): on_key(_KeyEvent(ev)(), _CanvasContext(w_handle)),
                                      fun (ev, w_handle): on_mouse(_MouseEvent(ev)(), _CanvasContext(w_handle))
                                    ))))

  export:
    Style

  symbol_map_annot Style convert_style:
    { border: border,
      control_border: #{control-border},
      combo: combo,
      vscroll: vscroll,
      hscroll: hscroll,
      resize_corner: #{resize-corner},
      gl: gl,
      no_autoclear: #{no-autoclear},
      transparent: transparent,
      no_focus: #{no-focus},
      deleted: deleted }

interface CanvasContext:
  property client_size :~ draw.Size

class _CanvasContext(private _handle):
  implements CanvasContext
  constructor _CanvasContext(handle):
    super(handle)
  override property client_size:
    let (w, h) = rkt.send _handle.#{get-client-size}()
    draw.Size(w, h)
