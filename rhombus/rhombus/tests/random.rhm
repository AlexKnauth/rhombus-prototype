#lang rhombus
import:
  rhombus/random.Random

block:
  import "static_arity.rhm"
  static_arity.check ~import rhombus/random:
    Random([state])
    Random.random(prng, [start], [end]) ~method
    Random.state(prng, [state])
    Random.current([prng])

check:
  use_static
  // FIXME this should have call result at arity 0
  def cur :~ Random = Random.current()
  cur.random()
  cur.random(1)
  cur.random(1, 2)
  cur.random(2 ** 1024)
  cur.state
  cur.state := cur.state
  ~completes

check:
  for (n: [2 ** 31, 2 ** 32, 2 ** 64, 10 ** 1000]):
    let M = 64
    let hits = Array.make(M)
    for (i: 0..M*100):
      let x = math.random(n)
      when x .>= n | error("too big")
      let k = x div (n div M)
      hits[k] := hits[k] + 1
    // We expect about 100 hits in each bin. Having less than 50 or
    // more than 150 should be so etxremely unlikely that we can rely on
    // it not happning:
    for (v: hits):
      when v < 50 || v > 150
      | error("bad sample")
  ~completes