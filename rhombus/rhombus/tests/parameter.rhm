#lang rhombus

block:
  import "static_arity.rhm"
  static_arity.check:
    Parameter.make(val)

block:
  def p = Parameter.make(10)

  check:
    p ~is_a Parameter
    p() ~is 10
    p(11) ~is #void
    p() ~is 11

  parameterize { p: 12 }:
    check:
      p() ~is 12
      p(13) ~is #void
      p() ~is 13

  check:
    p() ~is 11

block:
  def p = Parameter.make("1", ~guard: fun (x): to_string(x))

  check:
    p() ~is "1"
    (parameterize { p: 2 }: p()) ~is "2"
    (block: p(3); p()) ~is "3"

block:
  use_static
  Parameter.def p :: String = "apple"
  check:
    p() ~is "apple"
    p().length() ~is 5
    (parameterize { p: "banana" }: p()) ~is "banana"
    (parameterize { p: 0 }: p()) ~throws "annotation"

block:
  use_static
  Parameter.def p :: String: "apple"
  check:
    p() ~is "apple"
    p().length() ~is 5
    (parameterize { p: "banana" }: p()) ~is "banana"
    (parameterize { p: 0 }: p()) ~throws "annotation"

block:
  use_static
  Parameter.def p :~ String = "apple"
  check:
    p().length() ~is 5

block:
  use_static
  Parameter.def p :: String = #'oops
  check p() ~is #'oops
  check p(#'no) ~throws "annotation"

block:
  use_static
  Parameter.def p :~ String = #'oops
  check p() ~is #'oops
  check p(#'no) ~is #void

check:
  Parameter.def p = #false
  repr(p)
  ~is "#<context-parameter:p>"

check:
  repr(Parameter.make(#false))
  ~is "#<context-parameter:parameter>"

check:
  repr(Parameter.make(#false, ~name: #'p))
  ~is "#<context-parameter:p>"

check:
  ~eval
  use_static
  Parameter.def p = #false
  p(~key: 1)
  ~throws "keyword argument not recognized by called function (based on static information)"

check:
  ~eval
  use_static
  def p = Parameter.make(#false)
  p(~key: 1)
  ~throws "keyword argument not recognized by called function (based on static information)"

check:
  ~eval
  use_static
  Parameter.def p = #false
  p(1, 2)
  ~throws "wrong number of arguments in function call (based on static information)"

check:
  ~eval
  use_static
  def p = Parameter.make(#false)
  p(1, 2)
  ~throws "wrong number of arguments in function call (based on static information)"

check:
  use_static
  Parameter.def p = #false
  p.for_each([1, 2, 3, 4, 5])
  p()
  ~is 5

check:
  use_static
  def p = Parameter.make(#false)
  p.for_each([1, 2, 3, 4, 5])
  p()
  ~is 5

check:
  use_static
  Parameter.def p :: String = ""
  p("Hello")
  p().length()
  ~is 5

check:
  ~eval
  use_static
  Parameter.def p :: String = ""
  p("Hello").length()
  ~throws "no such field or method (based on static information)"
