#lang rhombus
import:
  "version_guard.rhm"

block:
  import "static_arity.rhm"
  static_arity.check:
    bits.length(n)
    bits.field(n, start, end)

// error reporting
check:
  "oops" bits.and 2 ~throws values(
    "bits.and: " ++ error.annot_msg(),
    error.annot("Int").msg,
    error.val("oops").msg,
  )
  1 bits.and "oops" ~throws values(
    "bits.and: " ++ error.annot_msg(),
    error.annot("Int").msg,
    error.val("oops").msg,
  )
  "oops" bits.or 2 ~throws values(
    "bits.or: " ++ error.annot_msg(),
    error.annot("Int").msg,
    error.val("oops").msg,
  )
  1 bits.or "oops" ~throws values(
    "bits.or: " ++ error.annot_msg(),
    error.annot("Int").msg,
    error.val("oops").msg,
  )
  "oops" bits.xor 2 ~throws values(
    "bits.xor: " ++ error.annot_msg(),
    error.annot("Int").msg,
    error.val("oops").msg,
  )
  1 bits.xor "oops" ~throws values(
    "bits.xor: " ++ error.annot_msg(),
    error.annot("Int").msg,
    error.val("oops").msg,
  )
  bits.not "oops" ~throws values(
    "bits.not: " ++ error.annot_msg(),
    error.annot("Int").msg,
    error.val("oops").msg,
  )

check:
  "oops" bits.(<<) 2 ~throws values(
    "bits.(<<): " ++ error.annot_msg(),
    error.annot("Int").msg,
    error.val("oops").msg,
  )
  1 bits.(<<) "oops" ~throws values(
    "bits.(<<): " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val("oops").msg,
  )
  1 bits.(<<) -1 ~throws values(
    "bits.(<<): " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val(-1).msg,
  )
  "oops" bits.(>>) 2 ~throws values(
    "bits.(>>): " ++ error.annot_msg(),
    error.annot("Int").msg,
    error.val("oops").msg,
  )
  1 bits.(>>) "oops" ~throws values(
    "bits.(>>): " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val("oops").msg,
  )
  1 bits.(>>) -1 ~throws values(
    "bits.(>>): " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val(-1).msg,
  )
  "oops" bits.(?) 2 ~throws values(
    "bits.(?): " ++ error.annot_msg(),
    error.annot("Int").msg,
    error.val("oops").msg,
  )

version_guard.at_least "8.14.0.2":
  check:
    1 bits.(?) "oops" ~throws values(
      "bits.(?): " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val("oops").msg,
    )
    1 bits.(?) -1 ~throws values(
      "bits.(?): " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val(-1).msg,
    )

check:
  bits.length("oops") ~throws values(
    "bits.length: " ++ error.annot_msg(),
    error.annot("Int").msg,
    error.val("oops").msg,
  )
  bits.field("oops", 2, 3) ~throws values(
    "bits.field: " ++ error.annot_msg(),
    error.annot("Int").msg,
    error.val("oops").msg,
  )

version_guard.at_least "8.14.0.2":
  check:
    bits.field(1, "oops", 3) ~throws values(
      "bits.field: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val("oops").msg,
    )
    bits.field(1, -1, 3) ~throws values(
      "bits.field: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val(-1).msg,
    )
    bits.field(1, 2, "oops") ~throws values(
      "bits.field: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val("oops").msg,
    )
    bits.field(1, 2, -1) ~throws values(
      "bits.field: " ++ error.annot_msg(),
      error.annot("NonnegInt").msg,
      error.val(-1).msg,
    )
    // NOTE different messages on CS vs. BC
    bits.field(1, 2, 1) ~throws values(
      "bits.field: ", " index is ", " than ", " index",
      " index: 1",
    )
