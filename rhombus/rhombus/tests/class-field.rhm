#lang rhombus/static

block:
  class C(s :: String, b = s[0]):
    fun enlist(v, b): [v, b]
    field more :~ List = enlist(s[1], b)
    field even_more = {more[0]}
  check C("apple").more ~is [Char"p", Char"a"]
  check C("banana").more ~is [Char"a", Char"b"]
  check C("apple").even_more ~is {Char"p"}
  block:
    use_dynamic
    check C.s(C("ok"), "x") ~throws "arity mismatch"

block:
  class C(s :: String, private b = s[0]):
    fun enlist(v, b): [v, b]
    private field more = enlist(s[1], b)
    method get_more(): more
  check C("apple").get_more() ~is [Char"p", Char"a"]

block:
  class C(s :: String, b = s[0]):
    field more = s[1]
    constructor (s):
      super("1" ++ s)
  check C("apple").s ~is "1apple"
  check C("apple").b ~is Char"1"
  check C("apple").more ~is Char"a"

check:
  class Posn(x, y):
    immutable dist = x + y
  Posn(1, 2).dist
  ~is 3

check:
  class Posn(x, y):
    immutable field dist = x + y
  Posn(1, 2).dist
  ~is 3

check:
  class Posn(x, y):
    private immutable field dist = x + y
    method get_dist(): dist
  Posn(1, 2).get_dist()
  ~is 3

// dependent result annotations
block:
  class Posn(x, y)
  class MPosn(mutable x, y)
  def m = Posn("a", #"bb")
  def mm :: MPosn.now_of(String, Bytes) = MPosn("a", #"bb")
  check Posn.x(m).length() ~is 1
  check Posn.y(m).length() ~is 2
  check MPosn.y(mm).length() ~is 2
  fun ex(p) :: Any.like_field(Posn.x(p)):
    Posn.x(p)
  fun wy(p) :: Any.like_field(Posn.y(p)):
    Posn.y(p)
  check ex(m).length() ~is 1
  check wy(m).length() ~is 2

block:
  class Posn(~x: x, y)
  let p = Posn(~x: "a", #"bb")
  check p.x.length() ~is 1
  check p.y.length() ~is 2

block:
  class Posn(x, ~y: y)
  let p = Posn("a", ~y: #"bb")
  check p.x.length() ~is 1
  check p.y.length() ~is 2

block:
  class Posn(~x: x, y):
    nonfinal
  class Posn3D(z):
    extends Posn
  let p = Posn3D(~x: "a", #"bb", "ccc")
  check p.x.length() ~is 1
  check p.y.length() ~is 2
  check p.z.length() ~is 3

block:
  class Posn(x, y):
    nonfinal
  class Posn4D(~z: z, w):
    extends Posn
  let p = Posn4D("a", #"bb", #"dddd", ~z: "ccc")
  check p.x.length() ~is 1
  check p.y.length() ~is 2
  check p.z.length() ~is 3
  check p.w.length() ~is 4

check:
  ~eval
  use_static
  class MPosn(mutable x, y)
  def mm :: MPosn.now_of(String, Bytes) = MPosn("a", #"bb")
  MPosn.x(mm).length()
  ~throws values("length",
                 "no such field or method",
                 "based on static information")
