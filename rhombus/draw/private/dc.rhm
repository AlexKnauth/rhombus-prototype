#lang rhombus/static/and_meta
import:
  "rkt.rhm"
  "color.rhm".Color
  "pen.rhm".Pen
  "pen.rhm"!private._Pen
  "brush.rhm".Brush
  "brush.rhm"!private._Brush
  "font.rhm".Font
  "font.rhm"!private._Font
  "symbol_map.rhm".symbol_set_annot
  "bitmap-interface.rhm".Bitmap

export:
  DC

submodule internal:
  export:
    SomeDC

interface DCer:
  internal _DCer
  abstract property dc

interface DC:
  private method get_dc():
    (this :: _DCer).dc

  property size :: matching([_ :: Real.at_least(0.0),
                             _ :: Real.at_least(0.0)]):
    def (w, h) = rkt.send get_dc().#{get-size}()
    [w, h]

  property width: size[0]
  property height: size[1]

  method push()
  method pop()

  method clear():
    rkt.send get_dc().clear()

  method font_metrics_key():
    rkt.send get_dc().#{cache-font-metrics-key}()

  method set_pen(p :: Pen):
    rkt.send get_dc().#{set-pen}(p.handle)

  method get_pen() :: Pen:
    _Pen(rkt.send get_dc().#{get-pen}())

  method set_brush(b :: Brush):
      rkt.send get_dc().#{set-brush}(b.handle)

  method get_brush() :: Brush:
    _Brush(rkt.send get_dc().#{get-brush}())

  method set_font(f :: Font):
      rkt.send get_dc().#{set-font}(f.handle)

  method get_font() :: Font:
    _Font(rkt.send get_dc().#{get-font}())

  method copy(x :: Real, y :: Real,
              width :: Real.at_least(0.0), height :: Real.at_least(0.0),
              x2 :: Real, y2 :: Real):
    rkt.send get_dc().copy(x, y, width, height, x2, y2)

  method draw_point(x :: Real, y :: Real):
    rkt.send get_dc().#{draw-point}(x, y)

  method draw_line(x :: Real, y :: Real,
                   x2 :: Real, y2 :: Real):
    rkt.send get_dc().#{draw-line}(x, y, x2, y2)
    
  method draw_lines([[x :: Real, y :: Real], ...],
                    ~dx: dx :: Real = 0.0,
                    ~dy: dy :: Real = 0.0):
    rkt.send get_dc().#{draw-lines}([Pair(x, y), ...], dx, dy)

  method draw_rectangle(x :: Real, y :: Real,
                        width :: Real.at_least(0.0), height :: Real.at_least(0.0)):
    rkt.send get_dc().#{draw-rectangle}(x, y, width, height)
    
  method draw_ellipse(x :: Real, y :: Real,
                      width :: Real.at_least(0.0), height :: Real.at_least(0.0)):
    rkt.send get_dc().#{draw-ellipse}(x, y, width, height)
    
  method draw_arc(x :: Real, y :: Real,
                  width :: Real.at_least(0.0), height :: Real.at_least(0.0),
                  start :: Real, end :: Real):
    rkt.send get_dc().#{draw-arc}(x, y, width, height, start, end)

  method draw_bitmap(b :: Bitmap,
                     x :: Real, y :: Real,
                     ~source_x: source_x :: Real = 0,
                     ~source_y: source_y :: Real = 0,
                     ~source_width: source_width :: Real.at_least(0.0) = b.width,
                     ~source_height: source_height :: Real.at_least(0.0) = b.height,
                     ~style: style :: DC.BitmapOverlay = #'solid,
                     ~color: color :: Color = Color("black"),
                     ~mask: mask :: Maybe(Bitmap) = #false):
    rkt.send get_dc().#{draw-bitmap-section}(b.handle, x, y,
                                             source_x, source_y,
                                             source_width, source_height,
                                             style, color.handle, mask)
    #void

  method draw_text(str :: String,
                   x :: Real, y :: Real,
                   ~combine: combine :: DC.TextCombine = #'kern,
                   ~angle: angle :: Real = 0.0):
    rkt.send get_dc().#{draw-text}(str, x, y,
                                   match combine
                                   | #'kern: #true
                                   | #'grapheme: #'grapheme
                                   | ~else: #false,
                                   0,
                                   angle)

  export:
    BitmapOverlay
    TextCombine

  symbol_set_annot BitmapOverlay:
    { solid, opaque, xor }

  symbol_set_annot TextCombine:
    { kern, grapheme, char }

class SomeDC(handle):
  nonfinal
  implements DC
  private implements DCer
  private override property dc: handle

  private field states = []

  override method push():
    states := [get_pen(),
               get_brush(),
               get_font(),
               states]
    
  override method pop():
    match states
    | []:
        error("DC.pop", "no state pushed")
    | [pen,
       brush,
       font,
       old_states]:
        set_pen(pen)
        set_brush(brush)
        set_font(font)
        states := old_states
