#lang rhombus/static/and_meta
import:
  "rkt.rhm"
  "symbol_map.rhm":
    expose: symbol_map_annot

export:
  Path

class Path(hand):
  opaque
  internal _Path

  constructor ():
    _Path(rkt.make_object(rkt.#{dc-path%}))

  method close():
    rkt.send hand.close()
  method is_open():
    rkt.send hand.#{open?}()
  method reset():
    rkt.send hand.reset()

  method scale(x :: Real, y :: Real):
    rkt.send hand.#{scale}(x, y)
  method rotate(radians :: Real):
    rkt.send hand.#{rotate}(radians)

  method curve_to(x1 :: Real, y1 :: Real,
                  x2 :: Real, y2 :: Real,
                  x3 :: Real, y3 :: Real):
    rkt.send hand.#{curve-to}(x1, y1, x2, y2, x3, y3)

  method line_to(x :: Real, y :: Real):
    rkt.send hand.#{line-to}(x, y)

  method move_to(x :: Real, y :: Real):
    rkt.send hand.#{move-to}(x, y)

  method rectangle(x :: Real, y :: Real,
                   width :: NonnegReal, height :: NonnegReal):
    rkt.send hand.#{rectangle}(x, y, width, height)

  method rounded_rectangle(x :: Real, y :: Real,
                           width :: NonnegReal, height :: NonnegReal,
                           radius :: Real):
    rkt.send hand.#{rounded-rectangle}(x, y, width, height, radius)

  method ellipse(x :: Real, y :: Real,
                 width :: NonnegReal, height :: NonnegReal):
    rkt.send hand.#{ellipse}(x, y, width, height)

  method arc(x :: Real, y :: Real,
             width :: NonnegReal, height :: NonnegReal,
             start_radians :: Real, end_radians :: Real,
             ~clockwise = #false):
    rkt.send hand.#{arc}(x, y, width, height, start_radians, end_radians, !clockwise)

  method polygon([[x :: Real, y :: Real], ...],
                 dx :: Real = 0.0,
                 dy :: Real = 0.0):
    rkt.send hand.#{lines}([Pair(x, y), ...], dx, dy)

