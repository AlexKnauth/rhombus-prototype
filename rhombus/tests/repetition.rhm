#lang rhombus
import: "check.rhm" open

// syntax-object templates with repetitions
begin:
  def [x, ...] = [1, 2, 3]
  def [[y, ...], ...] = [["a", "b", "c"], ["A", "B", "C"]]
  def [[z, ...], _] = [["a", "b", "c"], ["A", "B", "C"]]
  def [_, &[q]] = [["a", "b", "c"], ["A", "B", "C"]]
  def [_, &[w, ...]] = [["a", "b", "c"], ["A", "B", "C"]]

  check:
    [x, ...]
    [1, 2, 3]
  check:
    ~print
    '[($y) ...] ...'
    '[("a") ("b") ("c")] [("A") ("B") ("C")]'
  check:
    ~print
    '[($z) ...]'
    '[("a") ("b") ("c")]'
  check:
    q
    ["A", "B", "C"]
  check:
    [w, ...]
    [["A", "B", "C"]]

// syntax objects as repetitions
begin:
  def [x, ...] = ['1', '2', '3']
  check:
    ~print
    ['$x+1', ...]
    ['1+1', '2+1', '3+1']

// operator uses as reptitions
begin:
  def [x, ...] = [1, 4, 3]
  def four = 4
  check:
    [!(x == four), ...]
    [#true, #false, #true]
  check:
    [(x + (- four)), ...]
    [-3, 0, -1]
  check:
    operator (x %% y): [x, y]
    [x %% four, ...]
    [[1, 4], [4, 4], [3, 4]]

// function calls as reptitions
begin:
  def [x, ...] = [1, 2, 3]
  check:
    fun f(x, y): {x: y}
    [f(x, 0), ...]
    [{1: 0}, {2: 0}, {3: 0}]    
  check:
    fun f(~x: x, y): {x: y}
    [f(~x: x, 0), ...]
    [{1: 0}, {2: 0}, {3: 0}]
  check:
    fun f(& vs): vs
    [f(x, x, ...), ...]
    [[1, 1, 2, 3], [2, 1, 2, 3], [3, 1, 2, 3]]

// function calls with rest arguments as repetitions
begin:
  def [x, ...] = [[1], [2, 3]]
  check:
    fun f(& vs): vs
    [f(&x), ...]
    [[1], [2, 3]]

// function calls with repetition arguments as repetitions
begin:
  def [[x, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    fun f(v, ...): [[v, ...]]
    [f(x, ...), ...]
    [[[1, 2, 3]], [[4, 5]]]
  check:
    fun f(v, ...): [v, ...]
    [f(x+1, ...), ...]
    [[2, 3, 4], [5, 6]]

// function calls with keyword arguments as repetitions
begin:
  def [x, ...] = [{keyword'~a': "a"}, {keyword'~b': "b"}]
  fun f(~a: a = #false, ~b: b = #false): [a, b]
  check:
    [f(~& x), ...]
    [["a", #false], [#false, "b"]]

// static information through a constructor call as repetition
check:
  use_static
  class Posn(x, y)
  def [x, ...] = [1, 2, 3]
  [Posn(x, x), ...][1].x
  2

// static information through nested repetitions
begin:
  use_static
  class Posn(x, y)
  def [y -: Posn, ...] = [Posn(1, 2)]
  def [[x -: Posn, ...], ...] = [[Posn(1, 2)]]
  def '($z, ...) ...' = '(1, 2, 3) (4, 5)'
  check:
    [y, ...][0].x
    1
  check:
    [[x, ...], ...][0][0].x
    1
  check:
    [[z, ...], ...][1][1].unwrap()
    5

// map- and set-building `{}` as a repetition
begin:
  def [x, ...] = [1, 2, 3]
  check:
    [{x: 1}, ...]
    [{1: 1}, {2: 1}, {3: 1}]
  check:
    [Map{x: 1}, ...]
    [{1: 1}, {2: 1}, {3: 1}]
  check:
    ~print
    [MutableMap{x: 1}, ...]
    [{1: 1}, {2: 1}, {3: 1}]
  check:
    use_static
    def m = [{x: 1}, ...]
    m[1][2]
    1
  check:
    [Set(x, 1), ...]
    [{1}, {1, 2}, {1, 3}]
  check:
    ~print
    [MutableSet{x, 1}, ...]
    [{1}, {1, 2}, {1, 3}]
  check:
    ~print
    [MutableSet(x, 1), ...]
    [{1}, {1, 2}, {1, 3}]
  check:
    use_static
    def m = [{x}, ...]
    m[1][2]
    #true

// list-builiding `[]` as a repetition
begin:
  def [x, ...] = [0, 10, 100]
  check:
    [1, 2, &[3, 4], 5, x, ..., 6]
    [1, 2, 3, 4, 5, 0, 10, 100, 6]
  check:
    [[-1, x], ...]
    [[-1, 0], [-1, 10], [-1, 100]]
  check:
    def [[z, ...], ...] = [[0, 10, 100], [333]]
    [[(z), ...], ...]
    [[(0), (10), 100], [(333)]]

// reference `[]` as a repetition
begin:
  use_static
  class Posn(x, y)
  def a :: List.of(Posn):
    [Posn(1, 1), Posn(2, 2), Posn(3, 3), Posn(4, 4)]
  def [x, ...] = [3, 2, 1]
  check:
    [a[x], ...][0].x
    4

// dotted names as repetitions
begin:
  def [i, ...] = [1, 2, 3]
  check:
    [[List.length, i], ...]
    [[List.length, 1], [List.length, 2], [List.length, 3]]
  check:
    namespace M:
      export: N
      namespace N:
        export: three
        def three = 3
    [[i, M.N.three], ...]
    [[1, 3], [2, 3], [3, 3]]
  check:
    namespace M:
      export pi_ish
      def three = 3
      rule 'pi_ish': 'three'
    [[i, M.pi_ish], ...]
    [[1, 3], [2, 3], [3, 3]]

// `.` as a repetition
begin:
  use_static
  class Posn(x, y)
  def [p :: Posn, ...] = [Posn(1, 1), Posn(2, 2), Posn(3, 3), Posn(4, 4)]
  check:
    [p.x, ...]
    [1, 2, 3, 4]
  class Square(tl :: Posn, s :: Integer)
  def [s :: Square, ...] = [Square(Posn(0, 0), 10)]
  check:
    [s.tl, ...][0].x
    0
