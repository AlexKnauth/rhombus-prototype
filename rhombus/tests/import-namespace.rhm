#lang rhombus/and_meta
import: "check.rhm" open

namespace n:
  export: exint
  def exint = 10
  bind.only.rule 'exint': '(_ :: Integer)'
  annot.only.rule 'exint': 'Integer'

check:
  import: .n as ex_c
  def ex_c.exint = 10
  10 :: ex_c.exint
  ex_c.exint
  10

check:
  def n.exstr = "11"
  annot.only.rule '(n.exstr)': 'String'
  import: .n as ex_c
  def ex_c.exint = 10
  [10 :: ex_c.exint,
   ex_c.exint,
   "11" :: ex_c.exstr,
   ex_c.exstr]
  [10, 10, "11", "11"]

check:
  ~exn
  import: .n as ex_c
  def ex_c.exint = "10"
  "value does not satisfy annotation"

check:
  ~exn
  import: .n as ex_c
  "10" :: ex_c.exint
  "value does not match annotation"

check:
  import: .n open
  def exint = 10
  10 :: exint
  exint
  10

check:
  import:
    .n:
      open
      rename: exint as ex_int
  def ex_int = 10
  10 :: ex_int
  ex_int
  10

check:
  import:
    .n as ex_c:
      rename: exint as ex_int
  def ex_c.ex_int = 10
  10 :: ex_c.ex_int
  ex_c.ex_int
  10

check:
  import:
    .n:
      open
      only_space: ~default
  exint
  10

check:
  import:
    .n as ex_c:
      only_space: ~default
  ex_c.exint
  10

check:
  ~eval_exn
  begin:
    import rhombus/meta open
    namespace n:
      export: exint
      def exint = 10
      bind.only.rule 'exint': '(_ :: Integer)'
      annot.only.rule 'exint': 'Integer'
    import:
      .n:
        open
        only_space: ~default
    10 :: exint
  "not bound as an annotation"

check:
  ~eval_exn
  begin:
    import rhombus/meta open
    namespace n:
      export: exint
      def exint = 10
      bind.only.rule 'exint': '(_ :: Integer)'
      annot.only.rule 'exint': 'Integer'
    import:
      .n as ex_c:
        only_space: ~default
    10 :: ex_c.exint
  "not bound as an annotation"

check:
  import:
    .n:
      open
      only_space: rhombus/annot
  def exint = 11
  exint
  11

check:
  import:
    .n:
      open
      only_space: rhombus/annot
  11 :: exint
  11

check:
  import:
    .n as ex_c:
      only_space: rhombus/annot
  11 :: ex_c.exint
  11

begin:
  namespace n2:
    import:
      .n open:
        except_space: rhombus/bind
    export: exint
    bind.only.rule 'exint': '(_ :: PositiveInteger)'                            
  check:
    import .n2 as ex_c
    def ex_c.exint = 10
    10 :: ex_c.exint
    ex_c.exint
    10
  check:
    import .n as ex_c
    def ex_c.exint = -10
    "ok"
    "ok"
  check:
    ~exn
    import .n2 as ex_c
    def ex_c.exint = -10
    "value does not satisfy annotation"
  check:
    ~exn
    import .n2 open
    def exint = -10
    "value does not satisfy annotation"
