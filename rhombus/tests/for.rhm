#lang rhombus

block:
  def mutable accum = []
  check:
    for:
      each i: 0..2
      accum := List.cons(i, accum)
    accum
    ~is [1, 0]

check:
  for List:
    each i: 0..2
    i
  ~is [0, 1]

check:
  for Map:
    each i: 0..2
    values(i, "" +& i)
  ~is {0: "0", 1: "1"}

check:
  for:
    each i: 0..2
    i
    ~into List
  ~is [0, 1]

check:
  for:
    each i: 0..2
    i
    ~into List
  ~is [0, 1]

check:
  for List:
    each i: 0..2
    each j: 0..2
    [i, -j-1]
  ~is [[0, -1], [0, -2], [1, -1], [1, -2]]

check:
  for List:
    each:
      i: 0..2
      j: 0..2
    [i, -j-1]
  ~is [[0, -1], [1, -2]]

check:
  for List:
    def len = 2
    each:
      i: 0..len
      j: 0..len
    [i, -j-1]
  ~is [[0, -1], [1, -2]]

check:
  for List:
    each i: 0..2
    def i_plus = i+1
    each j: 0..2
    [i_plus, -j-1]
  ~is [[1, -1], [1, -2], [2, -1], [2, -2]]

check:
  for List:
    each i: 0..2
    def i_len = i+1
    each j: 0..i_len
    [i, -j-1]
  ~is [[0, -1], [1, -1], [1, -2]]

check:
  for values(sum = 0):
    each i: 0..4
    sum + i
  ~is 6

check:
  for values(sum = 0, parity = #true):
    each i: 0..4
    values(sum + i, !parity)
  ~is values(6, #true)

check:
  for values(sum = 0):
    each i: 0..4
    keep_when i != 1
    sum + i
  ~is 5

check:
  for values(sum = 0):
    each i: 0..4
    skip_when i == 1
    sum + i
  ~is 5

check:
  for values(sum = 0):
    each i: 0..8
    break_when i == 4
    sum + i
  ~is 6

check:
  for values(sum = 0):
    each i: 0..8
    final_when i == 4
    sum + i
  ~is 10

check:
  for values(sum = 0):
    each i: 0..8
    def new_sum = sum + i
    final_when i == 4
    def result = new_sum + 1
    result
  ~is 15

check:
  use_static
  class Posn(x, y)
  fun point_xs(l :~ List.of(List.of(Posn))):
    for:
      each ll: l
      each p: ll
      p.x
      ~into List
  point_xs([[Posn(1, 2), Posn(0, 5)], [], [Posn(3, 3)]])
  ~is [1, 0, 3]

check:
  for Set:
    each values(key, val): {1: "a", 2: "b"}
    key +& " -> " +& val
  ~is {"1 -> a", "2 -> b"}

check:
  for Set:
    each (key, val): {3: "c", 4: "d"}
    key +& " -> " +& val
  ~is {"3 -> c", "4 -> d"}

check:
  for Map:
    each key: {3, 4}
    values(key, key+1)
  ~is {3: 4, 4: 5}

check:
  for Array:
    each i: 3..7
    i
  ~prints_like Array(3, 4, 5, 6)

check:
  for Array ~length 6:
    each i: 3..7
    i
  ~prints_like Array(3, 4, 5, 6, 0, 0)

check:
  for Array ~length 2:
    each i: 3..7
    i
  ~raises "index is out of range"
