#lang rhombus/and_meta

begin:
  check:
    match '1 exact 2'
    |  '1 $('exact') 2': "yes"
    ~is "yes"

begin:
  check:
    match '1 exact 2'
    |  '1 $('exact') 2': "yes"
    ~is "yes"

check:
  def '($('1 2 3'))' = '(1 2 3)'
  ~completes

check:
  def ': ($('1 2 3'))' = ': (1 2 3)'
  ~completes

check:
  def '$(b && '1')' = '1'
  b
  ~prints_like '1'

check:
  def '$('($b)' && '(1)')' = '(1)'
  b
  ~prints_like '1'

check:
  def '$('(1)' && '($b)')' = '(1)'
  b
  ~prints_like '1'

check:
  def '($(a && '1 2 3'))' = '(1 2 3)'
  a
  ~prints_like '1 2 3'

check:
  def '$('1' || '2')' = '1' ~completes
  def '$('1' || '2')' = '2' ~completes
  def '$('1' || '2') ...' = '1 2 1' ~completes
  def '$('1' || '2') ...' = '1 2 1 3' ~raises "does not satisfy annotation"

begin:
  def a = "top a"
  check:
    match '1'
    | '$('1' && a)': a
    ~prints_like '1'
  check:
    match '2'
    | '$('1' || a)': a
    ~is "top a"
  check:
    match '2'
    | '$(a || '1')': a
    ~is "top a"
  
check:
  syntax_binding.macro 'g $x':
    '$x :: Group'
  match 'x: 2 3'
  |  '$_: $(g v)': v
  ~prints_like '2 3'
  
check:
  syntax_binding.macro 'g $x':
    '$x'
  match 'x: 2 3'
  |  '$_: $(g v)': v
  ~prints_like '2 3'

begin:
  syntax_binding.macro 'g':
    '('?')'
  check:
    match '1 ? 2'
    |  '1 $g 2': "yes"
    ~is "yes"
  check:
    match '1 ! 2'
    |  '1 $g 2': "yes"
    | ~else: "no"
    ~is "no"

begin:
  syntax_binding.macro 'g':
    '('exact')'
  check:
    match '1 exact 2'
    |  '1 $g 2': "yes"
    ~is "yes"

begin:
  syntax_binding.macro 'dots':
    '«'$('...')'»'
  check:
    match Syntax.make_group(['...', '...', '...'])
    | '$dots ...': "all dots"
    ~is "all dots"                 
  check:
    match Syntax.make_group(['!', '...', '...'])
    | '$dots ...': "all dots"
    | ~else: "not all dots"
    ~is "not all dots"

check:
  syntax.class Wrapped
  | '($content)'
  | '[$content]'
  | '{$content}'
  syntax_binding.macro 'wrapped $id':
    '$id :: Wrapped: content'
  match '{x} [y] (z)'
  | '$(wrapped a) ...': [a, ...]
  ~prints_like ['x', 'y', 'z']
