#lang rhombus/and_meta

check:
  expo.macro 'this_one ($id)':
    id
  namespace n:
    export: this_one (x)
    def x = 10
  n.x
  ~is 10

check:
  expo.modifier 'not_hello':
    ~op_stx self
    'except hello'
  namespace n:
    def hello = "hello"
    def hi = "hi"
    export:
      all_defined ~scope_like self: not_hello
  n.hi
  ~is "hi"

check:
  expo.macro 'do $(e :: expo_meta.Parsed) $()': e
  namespace n:
    def hi = "hi"
    export: do rename hi as hello
  n.hello
  ~is "hi"

check:
  expo.modifier 'do $tail ...':
    ~export exp
    def '$(m :: expo_meta.ParsedModifier(exp))' = '$tail ...'
    m
  namespace n:
    def hi = "hi"
    def hello = "hello"
    export: hi hello: do except hello
  n.hi
  ~is "hi"

check:
  expo.macro 'swap $a $b':
    def '$(ma :: expo_meta.Parsed)' = 'rename $a as $b'
    def '$(mb :: expo_meta.Parsed)' = 'rename $b as $a'
    '$ma #%juxtapose $mb'
  namespace n:
    def hi = "hi"
    def hello = "hello"
    export: swap hi hello
  n.hello
  ~is "hi"

check:
  use_static
  expo.modifier 'check_static_info':
    ~all_stx stx
    ~export exp
    exp.relocate(stx)
  namespace n:
    def hi = "hi"
    export: hi: check_static_info
  n.hi
  ~is "hi"
