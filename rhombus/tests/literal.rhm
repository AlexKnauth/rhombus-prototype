#lang rhombus

block:
  fun test(1):
    #void
  check test(1) ~completes
  check test(1.0) ~throws values(
    "argument does not satisfy annotation",
    "matching(1)",
  )

block:
  fun test(#'symbol):
    #void
  check test(#'symbol) ~completes
  check test(#'~keyword) ~throws values(
    "argument does not satisfy annotation",
    "matching(#'symbol)",
  )

block:
  fun test(1 || 2 || 3 || 4 || 5):
    #void
  check test(1) ~completes
  check test(2) ~completes
  check test(3) ~completes
  check test(4) ~completes
  check test(5) ~completes
  check test(#nan) ~throws values(
    "argument does not satisfy annotation",
    "matching(1 || 2 || 3 || 4 || 5)",
  )

block:
  fun test(1 || 2.0 || #nan || "a string" || #"a byte string"
             || #void || #false || #'symbol || #'~keyword):
    #void
  check test(1) ~completes
  check test(2.0) ~completes
  check test(#nan) ~completes
  check test("a string") ~completes
  check test(#"a byte string") ~completes
  check test(#void) ~completes
  check test(#false) ~completes
  check test(#'symbol) ~completes
  check test(#'~keyword) ~completes
  check test("oops") ~throws values(
    "argument does not satisfy annotation",
    "matching("
      ++ "1 || 2.0 || #nan || \"a string\" || #\"a byte string\""
      ++ " || #void || #false || #'symbol || #'~keyword"
      ++ ")",
  )

check:
  use_static
  def "a string" && str = dynamic("a string")
  str.length()
  ~is 8

check:
  use_static
  def ("a string" || "more strings" || "really?") && str:
    dynamic("really?")
  str.length()
  ~is 7

check:
  use_static
  def #"a byte string" && bstr = dynamic(#"a byte string")
  bstr.length()
  ~is 13

check:
  use_static
  def (#"a byte string" || #"more byte strings" || #"really?") && bstr:
    dynamic(#"really?")
  bstr.length()
  ~is 7

check:
  ~eval
  use_static
  def ("a string" || #"a byte string") && str = dynamic("a string")
  str.length()
  ~throws "no such field or method (based on static information)"

block:
  import:
    rhombus/meta open
  expr.macro 'source $expr':
    '#%literal $(expr.to_source_string())'
  check source "a string" ~is "\"a string\""
  check source #"a byte string" ~is "#\"a byte string\""
  check source #true ~is "#true"
  check source #false ~is "#false"
  check source 1 ~is "1"
  check source 2.0 ~is "2.0"
  check source #%literal "a string" ~is "#%literal \"a string\""
  check source #%literal #"a byte string" ~is "#%literal #\"a byte string\""
  check source #%literal #true ~is "#%literal #true"
  check source #%literal #false ~is "#%literal #false"
  check source #%literal 1 ~is "#%literal 1"
  check source #%literal 2.0 ~is "#%literal 2.0"
  check source #'symbol ~is "#'symbol"
  check source #'~keyword ~is "#'~keyword"
