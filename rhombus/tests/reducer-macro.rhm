#lang rhombus/and_meta

check:
  reducer.macro 'A5': 'Array ~length 5'
  for A5:
    each i: 1..3
    i
  ~is_now Array(1, 2, 0, 0, 0)

check:
  reducer.macro 'ListOfLists':
    reducer_meta.pack('build_reverse',
                      '(l = List.empty)',
                      'build_cons',
                      '()',
                      'l')
  expr.macro 'build_reverse $l_id $e':
    'List.reverse($e)'
  expr.macro 'build_cons $l_id $e':
    'List.cons([$e], $l_id)'
  for ListOfLists:
    each i: 1..3
    i
  ~is_now [[1], [2]]

check:
  reducer.macro 'AndCount($(r :: reducer_meta.Parsed))':
    def '($wrap, ($bind, ...), $step, $static_info, $data)' = reducer_meta.unpack(r)
    reducer_meta.pack('build_return',
                      '($bind, ..., count = 0)',
                      'build_inc',
                      '()',
                      '[count, $wrap, $step, $data]')
  expr.macro 'build_return [$count, $wrap, $step, $data] $e':
    'block:
       def values(r, c) = $e
       values($wrap $data r, c)'
  expr.macro 'build_inc [$count, $wrap, $step, $data] $e':
    'values($step $data $e, $count + 1)'
  for AndCount(List):
    each i: 0..3
    i
  ~is values([0, 1, 2], 3)
