#lang rhombus/and_meta
import:
  "check.rhm" open

use_static

class Posn(x, y)

annot.macro 'Vector':
  values(annot_meta.pack_predicate('fun (x): x is_a Posn',
                                   '(($(statinfo_meta.dot_provider_key), vector_dot_provider))'),
         '')


dot.macro 'vector_dot_provider $left $dot $right':
  match right
  | 'angle': 'vector_angle($left)'
  | 'magnitude': 'vector_magnitude($left)'

fun vector_angle(Posn(x, y)): atan(y, x)
fun vector_magnitude(Posn(x, y)): sqrt(x*x + y*y)

let vec :: Vector: Posn(3, 4)
check:
  vec.angle
  atan(4, 3)
check:
  vec.magnitude
  5

expr.macro 'or_zero $p $tail ...':
  values(statinfo_meta.wrap('$p || Posn(0,0)',
                            '(($(statinfo_meta.dot_provider_key),
                               vector_dot_provider))'),
         '$tail ...')

check:
  or_zero(Posn(3, 4)).magnitude
  5

check:
  or_zero(#false).magnitude
  0

fun zero_vec(): Posn(0, 0)
statinfo.only.macro 'zero_vec': '(($(statinfo_meta.call_result_key),
                                   $(statinfo_meta.pack('(($(statinfo_meta.dot_provider_key),
                                                           vector_dot_provider))'))))'
check:
  zero_vec().magnitude
  0

check:
  let p1 :: Posn.of(Integer, Posn): Posn(1, Posn(3, 4))
  // RHS influences info for LHS:
  let Posn(px, py): p1
  py.y
  4

// checking some static-info propagation cases
  
dot.macro 'myint_dot_provider $left $dot $right':
  match right
  | 'is_zero': '$left .= 0'
  | 'add': 'fun (v -: MyInt) -: MyInt: $left + v'

annot.macro 'MyInt':
  values(annot_meta.pack_predicate('fun (x): x is_a Integer',
                                   '(($(statinfo_meta.dot_provider_key), myint_dot_provider))'),
         '')

def (one -: MyInt) = 1

check:
  one.add(4).is_zero
  #false
check:
  one.add(-1).is_zero
  #true

check:
  ((one.add(4)) -: MyInt).is_zero
  #false

def two = 2 :: MyInt
check:
  two.is_zero
  #false

expr.rule 'I($n)': '$n -: MyInt'
def three = (I(3))
check:
  three.is_zero
  #false

operator ((x -: MyInt) my_plus (y -: MyInt)) -: MyInt:
  x.add(y)

check:
  (-2 my_plus 2).is_zero
  #true
