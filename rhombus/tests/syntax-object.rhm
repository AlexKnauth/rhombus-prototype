#lang rhombus

block:
  import "static_arity.rhm"
  static_arity.check:
    Syntax.make(t, [ctx])
    Syntax.make_group(t, [ctx])
    Syntax.make_sequence(t, [ctx])
    Syntax.unwrap(stx)
    Syntax.unwrap_sequence(stx)

check:
  Syntax.make(1)
  ~prints_like '1'

check:
  Syntax.make([1, 2])
  ~raises "invalid as a shrubbery term"

check:
  Syntax.make([#'parens, [#'group, 1, "a", #'z]])
  ~prints_like '(1 "a" z)'

check:
  Syntax.make([#'parens,
               [#'group, 1],
               [#'group, "a"],
               [#'group, [#'op, #'#{+}]]])
  ~prints_like '(1, "a", +)'

check:
  Syntax.make([#'parens, '1', '"a"', '+'])
  ~prints_like '(1, "a", +)'

check:
  Syntax.make([#'parens, '1 2 3', '"a"', '4 + 5'])
  ~prints_like '(1 2 3, "a", 4 + 5)'

check:
  Syntax.make(['block', '1 2', '3'])
  ~prints_like ': 1 2; 3'

check:
  Syntax.make_group([1, 2])
  ~prints_like '1 2'

check:
  Syntax.make_group(['block', ['block', '1 2', '3']])
  ~prints_like 'block: 1 2; 3'

check:
  Syntax.make(['block'])
  ~prints_like ':«»'

check:
  Syntax.make_group(['block', ['block', '1 2', '3'], 'more'])
  ~raises "invalid as a shrubbery non-tail term"

check:
  Syntax.make_group([])
  ~raises "NonemptyList"

check:
  Syntax.make([#'parens, Syntax.make_group([1])])
  ~prints_like '(1)'

check:
  Syntax.make_sequence(['a', 'b c', 'd e f'])
  ~prints_like 'a; b c; d e f'

check:
  Syntax.unwrap('x')
  ~is #'x

check:
  Syntax.unwrap('(1 2 3)')
  ~prints_like ['parens', '1 2 3']

check:
  Syntax.unwrap('(1, 2, 3)')
  ~prints_like ['parens', '1', '2', '3']

check:
  Syntax.unwrap_sequence('1 2; 3 4 5')
  ~prints_like ['1 2', '3 4 5']

check:
  Syntax.unwrap_sequence('1 2')
  ~prints_like ['1 2']

check:
  Syntax.unwrap_sequence('1')
  ~prints_like ['1']

check:
  match 'a: *'
  | 'a: $b': b is_a Operator
  ~is #true

check:
  match 'a: b'
  | 'a: $b': b is_a Identifier
  ~is #true
