#lang rhombus
import: "check.rhm" open

class Posn(x, y)

fun
| size(n :: Integer):
    n
| size(p :: Posn):
    p.x + p.y
| size(a, b):
    a+b

check:
  size(Posn(8, 6))
  14

check:
  size(1, 2)
  3

def Posn(px, py) -: Posn = Posn(1, 2)

check:
  List(px, py)
  [1, 2]

def identity = fun (x): x
check:
  identity(1 + (fun (x): x) (99) )
  100
check:
  identity(1+(fun (x): x)(99))
  100

// function result contracts

fun add1(x) :: Integer:
  match x
   | n :: Integer : x + 1
   | ~else: x

check:
  add1(100)
  101

check:
  ~exn
  add1("oops")
  "result does not satisfy annotation"

fun
| add_two(x) :: Number:
    x + 2.0
| add_two(x, y) :: String:
    x +& " and " +& y

check:
  add_two(7) .= 9.0
  #true

check:
  add_two(6, 7)
  "6 and 7"

check:
  begin:
    def f = fun (x) :: Integer: x
    f(10)
  10

fun on_diag(n :: Integer) :: Posn:
  Posn(n, n)

check:
  use_static
  on_diag(1).x
  1

check:
  use_static
  def known_posn = on_diag(2)
  known_posn.x
  2
