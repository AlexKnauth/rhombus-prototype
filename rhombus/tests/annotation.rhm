#lang rhombus

// check for sensible precedence of `::` mixed with expression
check:
  "a" :: String && #true ~is #true
  "a" :: String +& "ok" ~is "aok"

check:
  ~eval
  "a" :: PosInt . count()
  ~throws "operator precedence"

check:
  1 is_a Function ~is #false
  1 is_a Function.of_arity(1) ~is #false
  List is_a Function ~is #true
  List is_a Function.of_arity(1) ~is #true
  List is_a Function.of_arity(1, 2, 3) ~is #true
  Pair is_a Function.of_arity(2) ~is #true
  Pair is_a Function.of_arity(1, 2) ~is #false
  (fun (x): #void) is_a Function.of_arity(1) ~is #true
  (fun (x, ~y = 0): #void) is_a Function.of_arity(1) ~is #true
  (fun (x, ~y): #void) is_a Function.of_arity(1) ~is #false
  (fun (x, ~y = 0): #void) is_a Function.of_arity(1, ~y) ~is #true
  (fun (x, ~y): #void) is_a Function.of_arity(1, ~y) ~is #true

check:
  0 :: converting(fun (i :: Int when i mod 3 == 0): i)
  1 :: converting(fun (i :: Int unless i mod 3 == 0): i)
  [1, 2, 3] :: converting(fun ([x, ...] when math.sum(x, ...) == 6): #true)
  ~completes

check:
  0 is_a converting(fun (i :: Int when i mod 3 == 0): i)
  1 is_a converting(fun (i :: Int unless i mod 3 == 0): i)
  [1, 2, 3] is_a converting(fun ([x, ...] when math.sum(x, ...) == 6): #true)
  ~completes
