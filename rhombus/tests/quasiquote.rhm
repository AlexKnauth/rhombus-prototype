#lang rhombus

// dfferent repetition depths at same template depth
block:
  def [[x, ...], ...] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
  def [y, ...] = ["a", "b", "c"]
  def one = 1

  check:
    '([$x, $y] ... $0) ...
     {$y, $one} ...'
    ~prints_like '([1, "a"] [2, "b"] [3, "c"] 0) ([4, "a"] [5, "b"] [6, "c"] 0) ([7, "a"] [8, "b"] [9, "c"] 0)
                  {"a", 1} {"b", 1} {"c", 1}'
  check:
    ['$y', ...]
    ~prints_like ['"a"', '"b"', '"c"']
  check:
    ['x: $x; ...', ...]
    ~prints_like ['x: 1; 2; 3', 'x: 4; 5; 6', 'x: 7; 8; 9']

block:
  check:
    '$[1, 2] 3'
    ~prints_like '1 2 3'
  check:
    '$('1 2') 3'
    ~prints_like '1 2 3'
  check:
    '$('1') 3'
    ~prints_like '1 3'
  check:
    '0 $[1, 2]'
    ~prints_like '0 1 2'
  check:
    '0 $[1, 2] 3'
    ~prints_like '0 1 2 3'

  def [x, ...] = [1, 2, 3]
  check:
    '0 $[x, ...]'
    ~prints_like '0 1 2 3'
  check:
    '0 $['+', x] ...'
    ~prints_like '0 + 1 + 2 + 3'
  check:
    '0 $('+ $x') ...'
    ~prints_like '0 + 1 + 2 + 3'

  def [[z, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    '0 $[z, ...] ...'
    ~prints_like '0 1 2 3 4 5'

check:
  def '...': '...'
  ~completes

check:
  def '$('...')': '...'
  ~completes

check:
  def '1 $x 3' = '1 2 3'
  x
  ~prints_like '2'

check:
  def '1 $('$x') 3' = '1 2 3'
  x
  ~prints_like '2'

check:
  def '1 $('$x 3') 4' = '1 2 3 4'
  x
  ~prints_like '2'

check:
  def '1 $('$x ...') 4' = '1 2 3 4'
  [x, ...]
  ~prints_like ['2', '3']

check:
  def '$('a b $x')' = 'a b c'
  x
  ~prints_like 'c'

check:
  def '$('a b $x'); ...' = 'a b c; a b d'
  [x, ...]
  ~prints_like ['c', 'd']

check:
  ~eval
  'x $'
  ~raises "misplaced escape"

check:
  ~eval
  'x
   $'
  ~raises "misplaced escape"

check:
  ~eval
  '... x'
  ~raises "misplaced repetition"

check:
  ~eval
  '...
   x'
  ~raises "misplaced repetition"

check:
  ~eval
  def '0 $('1; 2') 3' = '0 1; 2'
  ~raises "multi-group pattern incompatible with term context"

check:
  ~eval
  def '0 $('1; 2')' = '0 1; 2'
  ~raises "multi-group pattern incompatible with group context"

check:
  ~eval
  def '(0, $('1; 2'))' = '(0, 1, 2)'
  ~raises "multi-group pattern incompatible with group context"

check:
  '1 $('')'
  ~prints_like '1'

check:
  def g = ''
  '3 + (1, $g $g)'
  ~raises "generated an empty group"

check:
  def ['(($b_var_id), ...)', ...]: ['((1), (2 2), (3))', '((4))']
  [b_var_id, ..., ...]
  ~prints_like ['1', '2 2', '3', '4']

block:
  // check that pattern bindings work with `let`
  check:
    let x = "no"
    fun f(): x
    let '$x' = '6'
    [x, f()]
    ~prints_like ['6', "no"]
  check:
    let [x, ...] = ["yes", "no"]
    fun f(): [x, ...]
    let '$x ...' = '6 7 8'
    [[x, ...], f()]
    ~prints_like [['6', '7', '8'], ["yes", "no"]]
