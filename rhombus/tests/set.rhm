#lang rhombus

check:
  Set.length({10, 20})
  ~is 2

// FIXME
#//
check:
  ~exn
  Set.length([1, 2, 3])
  values("contract violation", "expected: Set")

begin:
  use_static
  check:
    {1, 2}.length()
    ~is 2
  check:
    {"a", "b"}["a"]
    ~is #true
  check:
    Set("a", "b").length()
    ~is 2
  check:
    MutableSet("a", "b").length()
    ~is 2
  check:
    def set = {1, 2}
    set.length()
    ~is 2
  check:
    def set :: Set = dynamic({"a", "b"})
    set.length()
    ~is 2
  check:
    def set -: Set = dynamic({"a", "b"})
    set.length()
    ~is 2
  check:
    def set :: Set.of(String) = dynamic({"a", "b"})
    set.length()
    ~is 2

begin:
  check:
    dynamic({"a", "b"}).length()
    ~is 2
  check:
    dynamic({"a", "b"})["a"]
    ~is #true

// See also tests in "rest-args.rhm"
begin:
  check:
    {"a", "b", &{"c"}}
    ~is {"a", "b", "c"}
  check:
    {"a", &{"b", "c"}}
    ~is {"a", "b", "c"}
  check:
    {&{"b", "c"}, "a"}
    ~is {"a", "b", "c"}
  check:
    {&{"b"}, "a", &{"c"}}
    ~is {"a", "b", "c"}
  check:
    {"c", "b", &{"b"}, "a", &{"c"}}
    ~is {"a", "b", "c"}
  check:
    {"b", &{"b"}, "c", "a", &{"c"}}
    ~is {"a", "b", "c"}
  check:
    def mutable x = []
    [{&(begin: x := [1, x]; {"b"}), (begin: x:= [2, x]; "a"), &(begin: x:= [3, x]; {"c"})},
     x]
    ~is [{"a", "b", "c"},
         [3, [2, [1, []]]]]
  check:
    Set{&"oops"}
    ~raises "not a set"

begin:
  def [x, ...] = [1, 2, 3]
  check:
    {x, ...}
    ~is {1, 2, 3}
  check:
    {x, ..., 0}
    ~is {0, 1, 2, 3}
  check:
    {0, x, ...}
    ~is {0, 1, 2, 3}
  check:
    {&{10, 11}, x, ..., 0}
    ~is {0, 1, 2, 3, 10, 11}
  check:
    [{x}, ...]
    ~is [{1}, {2}, {3}]
  def [[z, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    [{z, ...}, ...]
    ~is [{1, 2, 3}, {4, 5}]

check:
  def {"x"}  = {"x"}
  ~completes

check:
  def Set{"x"}  = {"x"}
  ~completes

check:
  def Set("x")  = {"x"}
  ~completes

check:
  def {"x"}  = {"x", "y"}
  ~completes

check:
  def Set{"x"}  = {"x", "y"}
  ~completes

check:
  def ex = "x"
  def {ex +& "y"}  = {"xy"}
  ~completes

check:
  def Set{"x", "y"}  = {"x", "y"}
  ~completes

check:
  def {"x", key, ...} = {"x", "y", "z"}
  {key, ...}
  ~is {"y", "z"}

check:
  def Set{"x", key, ...} = {"x", "y", "z"}
  {key, ...}
  ~is {"y", "z"}
