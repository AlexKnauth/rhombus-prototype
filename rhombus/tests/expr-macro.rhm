#lang rhombus/and_meta

// postfix as a macro "infix" operator;

fun
| factorial(0): 1
| factorial(n): n*factorial(n-1)

expr.macro '$a *! $tail ...':
  values('(factorial($a))', '$tail ...')

check:
  10*!
  ~is 3628800

// a macro with an identifier name that does a weird
// thing with the result tail

expr.macro 'prefix_plus $a $b $c ...':
  values(a, '+ $b $c ...')

check:
  prefix_plus 7 9
  ~is 16

// another way to write that

expr.macro 'also_prefix_plus $e ...':
  match '$e ...'
  | '$a $b $c ...':
      values(a, '+ $b $c ...')
  | ~else:
      values('"this is terrible error reporting"', '()')

check:
  also_prefix_plus 7 9
  ~is 16

// an identifier macro

expr.rule 'just_five': '"five"'

check:
  just_five ++ " is the result"
  ~is "five is the result"

// mixin infix and prefix with multiple matching cases

rule
| 'weirdly coconut':
    ~stronger_than: +
    '"donut"'
| 'weirdly':
    '"banana"'
| '$a weirdly $b + $c':
    '$a + $b - $c'
| '$a weirdly $b':
    '$a + $b'

check:
  weirdly
  ~is "banana"
check:
  weirdly coconut
  ~is "donut"
check:
  weirdly ++ "none"
  ~is "banananone"
check:
  1 weirdly 5
  ~is 6
check:
  1 weirdly 5 + 7
  ~is -1

begin:
  expr.macro 'go ($(right :: expr_meta.AfterInfixGroup('*'): tail))':
    '$([tail, ...]
         +& '[$tail ...]'
         +& [right.tail, ...]
         +& '$right.tail ...')'
  check:
    go(3 + 4)
    ~is ("['+', '4']"
           +& "'[+ 4]'"
           +& "['+', '4']"
           +& "'+ 4'")

begin:
  expr.macro 'go ($(right :: expr_meta.AfterInfixGroup('*'): tail), ...)':
    '$([[tail, ...], ...]
         +& '[[$tail ...], ...]'
         +& [[right.tail, ...], ...]
         +& '[[$right.tail ...], ...]')'
  check:
    go(3 + 4, 5 + 8)
    ~is ("[['+', '4'], ['+', '8']]"
           +& "'[[+ 4], [+ 8]]'"
           +& "[['+', '4'], ['+', '8']]"
           +& "'[[+ 4], [+ 8]]'")
