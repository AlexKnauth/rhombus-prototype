#lang rhombus/static/and_meta
import:
  lib("racket/gui/easy.rkt")
  rhombus/draw/private/symbol_map.symbol_map_annot
  "type.rhm":
    expose:
      LabelString
      Margin
      Size
      Stretch
  "view.rhm".View
  rhombus/draw/private/dc!internal.CanvasDC
  "obs.rhm":
    expose: MaybeObs

export:
  Canvas

class Canvas(hand):
  implements View
  internal _Canvas
  opaque
  override property handle: hand

  constructor (data,
               draw :: Function.of_arity(2),
               ~label: label :: MaybeObs.of(Maybe(LabelString)) = "canvas", // should be `#false`?
               ~is_enabled: is_enabled :: MaybeObs.of(Boolean) = #true,
               ~style: style :: MaybeObs.of(List.of(Canvas.StyleSymbol)) = [],
               ~margin: margin :: MaybeObs.of(Margin) = [0, 0],
               ~min_size: min_size :: MaybeObs.of(Size) = [#false, #false],
               ~stretch: stretch :: MaybeObs.of(Stretch) = [#true, #true],
               ~mixin: mix :: Function = values):
    super(easy.canvas(obs.unwrap(data),
                      fun(dc, data): draw(CanvasDC(dc), data),
                      ~label: obs.unwrap(label),
                      #{#:enabled?}: obs.unwrap(is_enabled),
                      ~style: obs.unwrap_list(style, convert_style),
                      ~margin: obs.unwrap(margin),
                      #{#:min-size}: obs.unwrap_list(min_size, values),
                      ~stretch: obs.unwrap_list(stretch, values),
                      ~mixin: mix))

  export:
    StyleSymbol

  symbol_map_annot StyleSymbol convert_style:
    { border: boder,
      control_border: #{control-border},
      combo: combo,
      vscroll: vscroll,
      hscroll: hscroll,
      resize_corner: #{resize-corner},
      gl: gl,
      no_autoclear: #{no-autoclear},
      transparent: transparent,
      no_focus: #{no-focus},
      deleted: deleted }
