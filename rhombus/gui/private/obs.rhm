#lang rhombus/static/and_meta
import:
  lib("racket/gui/easy.rkt")

export:
  Obs
  MaybeObs
  _Obs
  unwrap
  unwrap_list
  unwrap_convert

def anon_str = "anon"

namespace MaybeObs:
  export: of
  annot.macro 'of($(ann :: annot_meta.Parsed))':
    def (pred, infos) = annot_meta.unpack_predicate(ann)
    annot_meta.pack_predicate('block:
                                 def pred = $pred
                                 fun
                                 | (v :: Obs): pred(v.peek())
                                 | (v): pred(v)',
                              '()')

annot.macro 'of($(ann :: annot_meta.Parsed))':
  def (pred, infos) = annot_meta.unpack_predicate(ann)
  def (obs_pred, obs_info):
    annot_meta.unpack_predicate(match 'Obs'
                                | '$(a :: annot_meta.Parsed)': a)
  annot_meta.pack_predicate('block:
                               def pred = $pred
                               fun (v :: Obs): pred(v.peek())',
                            obs_info)

class Obs(handle):
  internal _Obs
  constructor (v,
               ~name: name :: String = anon_str,
               ~is_derived = #false):
    super(easy.obs(v,
                   ~name: (if name === anon_str
                           | #'anon
                           | Symbol.from_string(name)),
                   #{#:derived?}: is_derived))

  method rename(name :: String) :: Obs:
    _Obs(easy.#{obs-rename}(handle, Symbol.from_string(name)))

  method observe(f :: Function):
    easy.#{obs-observe!}(handle, f)

  method unobserve(f :: Function):
    easy.#{obs-unobserve!}(handle, f)

  method update(f :: Function):
    easy.#{obs-update!}(handle, f)

  method peek():
    easy.#{obs-peek}(handle)

  method map(f :: Function) :: Obs:
    _Obs(easy.#{obs-map}(handle, f))

  method debounce(~duration: duration :: NonnegInt = 200) :: Obs:
    _Obs(easy.#{obs-debounce}(~duration: duration))

  method throttle(~duration: duration :: NonnegInt = 200) :: Obs:
    _Obs(easy.#{obs-throttle}(~duration: duration))

  export: combine
          of

fun combine(f :: Function, obs :: Obs, ...) :: Obs:
  _Obs(easy.#{obs-combine}(f, obs, ...))

fun
| unwrap(o :: Obs): o.handle
| unwrap(v): v

fun
| unwrap_convert(o :: Obs, convert :: Function): unwrap(o.map(convert))
| unwrap_convert(v, convert :: Function): convert(v)

fun
| unwrap_list(o :: Obs, convert :: Function): unwrap(o.map(fun (l): convert.map(l)))
| unwrap_list(v, convert :: Function): convert.map(v)
