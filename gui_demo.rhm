#lang rhombus/static
import:
  rhombus/draw
  rhombus/gui

fun draw_face(dc :: draw.DC, config :: Map):
  let [w, h] = dc.size
  let s = math.max(10, math.min(w, h) - 20)
  
  let scale = config["scale"] / 50
  let w = w / scale
  let h = h / scale
  
  let x = (w-s)/2
  let y = (h-s)/2
  let π = math.pi

  dc.push()

  dc.scale(scale)

  let background: if config["mood"] == "Happy"
                  | draw.RadialGradient(w/2, h/2, s/2,
                                        w/2, h/2, math.max(w, h),
                                        [[0, draw.Color("white")],
                                         [1, draw.Color("yellow")]])
                  | draw.LinearGradient(0, 0,
                                        0, h,
                                        [[0.5, draw.Color("white")],
                                         [1, draw.Color("darkblue")]])
  
  dc.pen := draw.Pen.none
  dc.brush := draw.Brush(~gradient: background)
  dc.rectangle(0, 0, w, h)
  
  dc.brush := draw.Brush(~color: "orange")
  dc.ellipse(x, y, s, s)

  dc.pen := draw.Pen(~color: "Black")
  dc.brush := draw.Brush.none
  if config["mood"] == "Happy"
  | dc.arc(x + 0.2*s, y + 0.2*s, 0.6*s, 0.6*s, π * -3/4, π * -1/4)
  | dc.arc(x + 0.2*s, y + 0.7*s, 0.6*s, 0.6*s, π * 1/4, π * 3/4)

  when config["eyes"]
  | dc.pen := draw.Pen.none
    dc.brush := draw.Brush(~color: "black")
    dc.ellipse(x+0.3*s, y+0.3*s, 0.1*s, 0.1*s)
    dc.ellipse(x+0.6*s, y+0.3*s, 0.1*s, 0.1*s)

  when config["moustache"]
  | let p = draw.Path()
    p.move_to(0, 0)
    p.curve_to(20, -10,  80, -10,  100, 0)
    p.curve_to(120, 10,  180, 0,  200, -20)
    p.curve_to(180, 20,  120, 40, 90, 30)
    p.curve_to(60, 20, 20, 20, 0, 0)
    p.close()
    p.scale(s/500, s/500)
    dc.pen := draw.Pen.none
    dc.brush := draw.Brush(~color: "brown")
    dc.path(p, ~dx: x+0.5*s, ~dy: y+0.6*s)
    p.scale(-1, 1)
    dc.path(p, ~dx: x+0.5*s, ~dy: y+0.6*s)

  dc.pop()

def tabs:
  let at_tab = gui.Obs("Happy")
  let eyes = gui.Checkbox("Eyes", ~is_checked: #true)
  let stache = gui.Checkbox("Moustache", ~is_checked: #false)
  let scale = gui.Slider("", // empty label works around a `gui-easy` bug for now
                         ~value: 50,
                         ~min_value: 1,
                         ~max_value: 100,
                         ~style: [#'plain, #'horizontal])
  let spacer = gui.HPanel(~stretch: [#true, #true])
  
  def canvas = gui.VPanel(gui.Canvas(gui.Obs.combine({ "mood": at_tab,
                                                       "eyes": eyes.at_is_checked,
                                                       "moustache": stache.at_is_checked,
                                                       "scale": scale.at_value } ),
                                     draw_face),
                          gui.HPanel(eyes, stache,
                                     spacer,
                                     gui.Label("-"), scale, gui.Label("+"),
                                     ~stretch: [#true, #false]))

  def happy_button = gui.Button("Be Happy",
                                ~action: fun ():
                                           at_tab.update(fun (v): "Happy"),
                                ~stretch: [#false, #false])

  gui.TabsPanel(["Happy", "Sad"],
                ~selection: at_tab,
                at_tab.map(fun (v):
                             match v
                             | "Happy": canvas
                             | ~else gui.HPanel(canvas, happy_button)))

gui.render(gui.Window(tabs,
                      ~size: [800, 600]))
